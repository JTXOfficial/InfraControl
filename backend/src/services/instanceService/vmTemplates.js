const generateKvmDomainXml = (options) => { const { vmName, memoryMB, cpuCount, diskImagePath, cloudInitRequired, sshUsername } = options; return `<domain type="kvm"><name>${vmName}</name><memory unit="MiB">${memoryMB}</memory><vcpu placement="static">${cpuCount}</vcpu><os><type arch="x86_64">hvm</type><boot dev="hd"/></os><features><acpi/><apic/></features><cpu mode="host-model"/><clock offset="utc"/><devices><emulator>/usr/bin/qemu-system-x86_64</emulator><disk type="file" device="disk"><driver name="qemu" type="qcow2"/><source file="${diskImagePath}"/><target dev="vda" bus="virtio"/></disk>${cloudInitRequired ? `<disk type="file" device="cdrom"><driver name="qemu" type="raw"/><source file="/home/${sshUsername}/kvm_images/cloud-init/${vmName}/cloud-init.iso"/><target dev="sda" bus="sata"/><readonly/></disk>` : ""}<interface type="network"><source network="default"/><model type="virtio"/></interface><console type="pty"><target type="serial" port="0"/></console><channel type="unix"><target type="virtio" name="org.qemu.guest_agent.0"/></channel><graphics type="vnc" port="-1" autoport="yes" listen="0.0.0.0"><listen type="address" address="0.0.0.0"/></graphics><video><model type="qxl" ram="65536" vram="65536" vgamem="16384" heads="1"/></video><memballoon model="virtio"/><rng model="virtio"><backend model="random">/dev/urandom</backend></rng></devices></domain>`; }; module.exports = { generateKvmDomainXml };
